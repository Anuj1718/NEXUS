// let num1 = 231;
// let num2 = new Number(231);
// let num3 = new Number(231);
// console.log(num1==num2); // when number is compared with object, it converts object to primitive value (as when num is compared with string, it converts string to number, when number is compared with boolean, it converts boolean to number)
// num2 wil be converted to primitive value 231 and then compared with num1, hence turns true
// console.log(num2==num3); // this will check the reference of num2 and num3 in stack, both are different objects, hence false
// true and false
// console.log(num2);
// console.log(typeof num2);

// let num = 231.68;
// console.log(num.toFixed(3)); // returns string, 3 is the number of digits after decimal point, 231.680
// console.log(num.toPrecision(4)); // returns string, 4 is the total number of digits in the number, 231.7
// console.log(num.toExponential(2)); // returns string, 2 is the number of digits after decimal point in exponential form, // 2.32e+2
// console.log(num.toString()); // returns string, converts number to string
// console.log(num.valueOf()); // returns number, gives the primitive value of the object
// console.log(typeof num.toString()); 

//  Math

// console.log(Math.E) 
// Ans: 2.718281828459045
// Explanation: Math.E is Euler's number, the base of natural logarithms.

// console.log(Math.LN10);
// Ans: 2.302585092994046
// Explanation: Math.LN10 is the natural logarithm of 10 (ln(10)). (base e.)

// console.log(Math.PI);
// Ans: 3.141592653589793
// Explanation: Math.PI is the ratio of a circle's circumference to its diameter (Ï€).

// console.log(Math.LOG10E);
// Ans: 0.4342944819032518
// Explanation: Math.LOG10E is the base-10 logarithm of Euler's number


// console.log(Math.random()); // returns a random number between 0 (inclusive) and 1 (exclusive)
// console.log(Math.random() * 10); // returns a random number between 0 (inclusive) and 10 (exclusive) 

// floor and ceil
// let num1 = 23.1;
// console.log(Math.floor(num1)); // Ans: 23 (neeche wali value)
// console.log(Math.ceil(num1)); // Ans: 24 (uppar wali value)


// console.log(Math.floor(Math.random()*10)); // returns a random integer between 0 (inclusive) and 10 (exclusive) [0-9]
// console.log(Math.ceil(Math.random()*10)); // returns a random integer between 1 (inclusive) and 11 (exclusive) [1-10]


// 1-10 generate
// console.log(Math.floor(Math.random()*10)+1)

// 11-20 generate
// console.log(Math.floor(Math.random()*10)+11);
// 0-9 + 11

// min = 40 , max =50;
// console.log(Math.floor(Math.random()*(max-min+1)+min)); // returns a random integer between min (inclusive) and max (inclusive)
// explanation: Math.random() generates a random number between 0 (inclusive) and 1 (exclusive).
// Multiplying by (max - min + 1) scales the random number to the desired range.
// Adding min shifts the range to start from the desired minimum value.
// explanation of (max-min+1):

// 0-9
// console.log(Math.floor(Math.random()*10));

// 0-10
// console.log(Math.floor(Math.random()*11)); // returns a random integer between 0 (inclusive) and 11 (exclusive) [0-10]
// multiply by 11 as we want 11 numbers (0-10) 
// max = 10; min = 0; hence (max-min+1) = 11, multiply by 11


//0-11 : multiply by 12
// max = 11; min = 0; hence (max-min+1) = 12, multiply by 12
// now why added min 

// 1-12 
// ik i can do 0-11, so add 1 to it
// console.log(Math.floor(Math.random()*(12-1+1)+1)); // returns a random integer between 1 (inclusive) and 12 (inclusive) [1-12]

// 2-12, do 0-10 and add 2 to it
// console.log(Math.floor(Math.random()*11+2));
// 30-40
// console.log(Math.floor(Math.random()*(40-30+1)+30));

// Ludo
// 1-6
console.log(Math.floor(Math.random()*(6-1+1)+1));


// Math.random() uses system time/clock to generate random numbers, so it will always give different numbers on each execution.
// System clock never stops, so Math.random() will always generate different numbers.
// However, the numbers are pseudo-random, meaning they are generated using an algorithm and not truly random.
// The sequence of numbers generated by Math.random() is determined by the initial seed value,
// which is based on the current time when the script is executed.
// Therefore, if you run the script multiple times, you will get different random numbers each time
// unless you set a fixed seed value in your random number generator function.
// if you want to generate same random number every time, you can use a seed value,
// but JavaScript does not have a built-in way to set a seed for Math.random().
// You can create your own random number generator function with a seed value if you need reproducible results.
// Math.random() is not suitable for cryptographic purposes, as it is not truly random and can be predictable.
// For cryptographic purposes, you should use the Web Crypto API's crypto.getRandomValues()
// or other libraries that provide secure random number generation.
// For OTP, you do not use Math.random() as it is not secure enough.
// Instead, you can use the Web Crypto API's crypto.getRandomValues() to generate secure random numbers.
// Example of generating a secure random number using Web Crypto API: